generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(STUDENT)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  profile       UserProfile?
  submissions   Submission[]
  assessments   Assessment[]
  notifications Notification[]
  weeklyProgress WeeklyProgress[]  // DODANE
  studyGoals    StudyGoal[]       // DODANE
  dailyProgress DailyProgress[]   // DODANE
}

model UserProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  
  examDate        DateTime?
  preferredTopics String[]
  studyStreak     Int       @default(0)
  totalPoints     Int       @default(0)
  level           Int       @default(1)
  averageScore    Float     @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Exercise {
  id            String         @id @default(cuid())
  type          ExerciseType
  category      Category
  epoch         LiteraryEpoch?
  difficulty    Int            @default(1)
  points        Int
  question      String
  content       Json
  correctAnswer Json?
  rubric        Json?
  tags          String[]
  metadata      Json?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  submissions   Submission[]
  spacedRepetitions SpacedRepetition[]
}

model Submission {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  exerciseId  String
  exercise    Exercise       @relation(fields: [exerciseId], references: [id])
  
  answer      Json
  score       Float?
  feedback    Json?
  assessedBy  AssessmentType @default(SYSTEM)
  timeSpent   Int?           @default(0)
  
  createdAt   DateTime       @default(now())
  
  assessment  Assessment?
}

model Assessment {
  id           String      @id @default(cuid())
  submissionId String      @unique
  submission   Submission  @relation(fields: [submissionId], references: [id])
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  
  formalScore       Float?
  literaryScore     Float?
  compositionScore  Float?
  languageScore     Float?
  
  totalScore        Float
  detailedFeedback  Json
  improvements      String[]
  
  createdAt         DateTime @default(now())
}

model SpacedRepetition {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  
  interval    Int      @default(1)
  easeFactor  Float    @default(2.5)
  repetitions Int      @default(0)
  nextReview  DateTime
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  
  @@unique([userId, exerciseId])
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  @@unique([userId, achievementId])
}

model Essay {
  id        String   @id @default(cuid())
  userId    String
  topic     String
  content   String
  wordCount Int
  
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  type      String
  title     String
  message   String
  actionUrl String?
  read      Boolean  @default(false)
  
  createdAt DateTime @default(now())
  
  @@index([userId, read])
}

model WeeklyProgress {
  id          String   @id @default(cuid())
  userId      String
  week        Int
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, week])
  @@index([userId])
}

model StudyGoal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  targetDate  DateTime
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model DailyProgress {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime @db.Date
  exercisesCount  Int      @default(0)
  studyTime       Int      @default(0) // in minutes
  averageScore    Float?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, date])
  @@index([userId])
}

enum UserRole {
  STUDENT
  ADMIN
}

enum ExerciseType {
  CLOSED_SINGLE
  CLOSED_MULTIPLE
  SHORT_ANSWER
  SYNTHESIS_NOTE
  ESSAY
}

enum Category {
  LANGUAGE_USE
  HISTORICAL_LITERARY
  WRITING
}

enum LiteraryEpoch {
  ANTIQUITY
  MIDDLE_AGES
  RENAISSANCE
  BAROQUE
  ENLIGHTENMENT
  ROMANTICISM
  POSITIVISM
  YOUNG_POLAND
  INTERWAR
  CONTEMPORARY
}

enum AssessmentType {
  SYSTEM
  AI
}