generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(STUDENT)
  profile       UserProfile?
  refreshToken  String?
  lastLogin     DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt  
  
  submissions   Submission[]
  assessments   Assessment[]
  notifications Notification[]
  weeklyProgress WeeklyProgress[]
  studyGoals    StudyGoal[]
  dailyProgress DailyProgress[]
  materialProgress UserMaterialProgress[]
  examSessions  ExamSession[]
  exerciseUsage ExerciseUsage[]
  learningSessions LearningSession[]
}


model UserProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  
  examDate        DateTime?
  preferredTopics String[]
  studyStreak     Int       @default(0)
  totalPoints     Int       @default(0)
  level           Int       @default(1)
  averageScore    Float     @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Exercise {
  id            String         @id @default(cuid())
  type          ExerciseType
  category      Category
  epoch         LiteraryEpoch?
  difficulty    Int            @default(1)
  points        Int
  question      String
  content       Json
  correctAnswer Json?
  rubric        Json?
  tags          String[]
  metadata      Json?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  submissions   Submission[]
  spacedRepetitions SpacedRepetition[]
  examQuestions ExamQuestion[]
  usageHistory  ExerciseUsage[]
}

model TextSource {
  id        String   @id @default(cuid())
  examId    String
  exam      MockExam @relation(fields: [examId], references: [id])
  
  autor     String
  tytul     String
  fragment  String   @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([examId])
}


model Submission {
  id          String         @id @default(cuid())
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  exerciseId  String
  exercise    Exercise       @relation(fields: [exerciseId], references: [id])
  
  answer      Json
  score       Float?
  feedback    Json?
  assessedBy  AssessmentType @default(SYSTEM)
  timeSpent   Int?           @default(0)
  
  createdAt   DateTime       @default(now())
  
  assessment  Assessment?
}

model ExerciseUsage {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  exerciseId    String
  exercise      Exercise  @relation(fields: [exerciseId], references: [id])
  
  lastUsedAt    DateTime  @default(now())
  usageCount    Int       @default(1)
  context       UsageContext // LEARNING, EXAM, STUDY_PLAN
  
  @@unique([userId, exerciseId])
  @@index([userId, lastUsedAt])
  @@index([exerciseId])
}

enum UsageContext {
  LEARNING
  EXAM
  STUDY_PLAN
}


model Assessment {
  id           String      @id @default(cuid())
  submissionId String      @unique
  submission   Submission  @relation(fields: [submissionId], references: [id])
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  
  formalScore       Float?
  literaryScore     Float?
  compositionScore  Float?
  languageScore     Float?
  
  totalScore        Float
  detailedFeedback  Json
  improvements      String[]
  
  createdAt         DateTime @default(now())
}

model SpacedRepetition {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  
  interval    Int      @default(1)
  easeFactor  Float    @default(2.5)
  repetitions Int      @default(0)
  nextReview  DateTime
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  
  @@unique([userId, exerciseId])
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  @@unique([userId, achievementId])
}

model Essay {
  id        String   @id @default(cuid())
  userId    String
  topic     String
  content   String
  wordCount Int
  
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  type      String
  title     String
  message   String
  actionUrl String?
  read      Boolean  @default(false)
  
  createdAt DateTime @default(now())
  
  @@index([userId, read])
}

model WeeklyProgress {
  id          String   @id @default(cuid())
  userId      String
  week        Int
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, week])
  @@index([userId])
}

model StudyGoal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  targetDate  DateTime
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model DailyProgress {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime @db.Date
  exercisesCount  Int      @default(0)
  studyTime       Int      @default(0) // in minutes
  averageScore    Float?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, date])
  @@index([userId])
}

model LiteraryWork {
  id            String    @id @default(cuid())
  title         String
  author        String
  epoch         LiteraryEpoch
  genre         String
  year          Int?
  isRequired    Boolean   @default(false) // lektura obowiązkowa
  
  summary       String?   @db.Text // streszczenie
  themes        String[]  // motywy
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  chapters      Chapter[]
  characters    Character[]
  quotes        Quote[]
  analyses      Analysis[]
  materials     Material[]
}

model Chapter {
  id            String    @id @default(cuid())
  workId        String
  work          LiteraryWork @relation(fields: [workId], references: [id])
  
  number        Int
  title         String
  summary       String    @db.Text
  keyEvents     String[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([workId, number])
}

model Character {
  id            String    @id @default(cuid())
  workId        String
  work          LiteraryWork @relation(fields: [workId], references: [id])
  
  name          String
  description   String    @db.Text
  role          String    // główny, drugoplanowy, epizodyczny
  traits        String[]
  evolution     String?   @db.Text
  quotes        String[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Quote {
  id            String    @id @default(cuid())
  workId        String
  work          LiteraryWork @relation(fields: [workId], references: [id])
  
  text          String    @db.Text
  context       String?
  character     String?
  chapter       Int?
  significance  String?   @db.Text
  tags          String[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Analysis {
  id            String    @id @default(cuid())
  workId        String
  work          LiteraryWork @relation(fields: [workId], references: [id])
  
  title         String
  type          AnalysisType
  content       String    @db.Text
  author        String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Material {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  type          MaterialType
  category      MaterialCategory
  
  content       Json      // Rich text content
  summary       String?
  
  epoch         LiteraryEpoch?
  workId        String?
  work          LiteraryWork? @relation(fields: [workId], references: [id])
  
  tags          String[]
  difficulty    Int       @default(1)
  readingTime   Int?      // w minutach
  
  isPremium     Boolean   @default(false)
  isPublished   Boolean   @default(true)
  views         Int       @default(0)
  
  author        String?
  metaTitle     String?
  metaDescription String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  publishedAt   DateTime?
  
  userProgress  UserMaterialProgress[]  // DODAJ TĘ LINIĘ!
  
  @@index([slug])
  @@index([category, epoch])
  @@index([isPublished, isPremium])
}

model EpochInfo {
  id            String    @id @default(cuid())
  epoch         LiteraryEpoch @unique
  name          String
  namePolish    String
  period        String    // np. "1450-1600"
  
  characteristics String[] // cechy epoki
  philosophy    String    @db.Text
  artStyle      String    @db.Text
  mainGenres    String[]
  keyAuthors    String[]
  keyWorks      String[]
  
  historicalContext String @db.Text
  timeline      Json      // wydarzenia w formie JSON
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LiteraryTerm {
  id            String    @id @default(cuid())
  term          String    @unique
  category      String    // środki stylistyczne, gatunki, etc.
  definition    String    @db.Text
  examples      String[]
  relatedTerms  String[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([category])
}

model EssayTemplate {
  id            String    @id @default(cuid())
  title         String
  type          String    // rozprawka, interpretacja, etc.
  structure     Json      // struktura w JSON
  tips          String[]
  examples      String[]  @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserMaterialProgress {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])  // DODAJ TĘ LINIĘ!
  materialId    String
  material      Material  @relation(fields: [materialId], references: [id])  // DODAJ TĘ LINIĘ!
  
  completed     Boolean   @default(false)
  progress      Int       @default(0) // 0-100%
  lastAccessed  DateTime  @default(now())
  notes         String?   @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, materialId])
  @@index([userId])
}

model MockExam {
  id            String    @id @default(cuid())
  title         String
  year          Int?      // np. 2024
  type          ExamType  // PODSTAWOWY, ROZSZERZONY
  duration      Int       // czas trwania w minutach (170 dla podstawowej)
  isActive      Boolean   @default(true)
  
  sections      ExamSection[]
  sessions      ExamSession[]
  textSources   TextSource[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ExamSection {
  id            String    @id @default(cuid())
  examId        String
  exam          MockExam  @relation(fields: [examId], references: [id])
  
  order         Int       // kolejność sekcji
  title         String    // np. "Test historycznoliteracki"
  instruction   String    @db.Text
  timeLimit     Int?      // limit czasu na sekcję (opcjonalny)
  
  questions     ExamQuestion[]
  
  @@unique([examId, order])
}

model ExamQuestion {
  id            String    @id @default(cuid())
  sectionId     String
  section       ExamSection @relation(fields: [sectionId], references: [id])
  
  order         Int       // kolejność w sekcji
  exerciseId    String?   // powiązanie z istniejącym zadaniem
  exercise      Exercise? @relation(fields: [exerciseId], references: [id])
  
  // Lub własne zadanie
  type          ExerciseType?
  question      String?   @db.Text
  content       Json?
  points        Int
  
  @@unique([sectionId, order])
}

model ExamSession {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  examId        String
  exam          MockExam  @relation(fields: [examId], references: [id])
  isIntelligent Boolean?   @default(false)
  
  startedAt     DateTime  @default(now())
  finishedAt    DateTime?
  timeSpent     Int?      // w sekundach
  
  status        ExamStatus @default(IN_PROGRESS)
  
  answers       ExamAnswer[]
  
  // Wyniki
  totalScore    Float?
  maxScore      Float?
  percentScore  Float?
  
  // Ocena szczegółowa
  assessment    Json?
  
  @@index([userId])
  @@index([examId])
}

model ExamAnswer {
  id            String    @id @default(cuid())
  sessionId     String
  session       ExamSession @relation(fields: [sessionId], references: [id])
  questionId    String
  
  answer        Json
  score         Float?
  maxScore      Float
  
  submittedAt   DateTime  @default(now())
  
  @@unique([sessionId, questionId])
}

model LearningSession {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  status        LearningSessionStatus @default(IN_PROGRESS)
  
  startedAt     DateTime  @default(now())
  lastActiveAt  DateTime  @default(now())
  finishedAt    DateTime?
  
  // Stan sesji
  completed     Int       @default(0)
  correct       Int       @default(0)
  streak        Int       @default(0)
  maxStreak     Int       @default(0)
  points        Int       @default(0)
  timeSpent     Int       @default(0) // sekundy
  
  // Filtry sesji
  filters       Json?     // zapisane filtry
  
  // Ukończone zadania
  completedExercises Json? // [{id, score}]
  skippedExercises   Json? // [id1, id2...]
  
  @@index([userId, status])
}

enum LearningSessionStatus {
  IN_PROGRESS
  COMPLETED
  PAUSED
}

enum ExamType {
  PODSTAWOWY
  ROZSZERZONY
}

enum ExamStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIMEOUT
}


enum MaterialType {
  EPOCH_OVERVIEW
  WORK_ANALYSIS
  CHARACTER_ANALYSIS
  THEME_ANALYSIS
  WRITING_GUIDE
  THEORY
  SUMMARY
  INTERPRETATION
  CONTEXT
  BIOGRAPHY
}

enum MaterialCategory {
  EPOCHS
  LITERATURE
  THEORY
  WRITING
  EXAM_PREP
  QUICK_REVIEW
}

enum AnalysisType {
  THEMES
  SYMBOLS
  STYLE
  INTERPRETATION
  CONTEXT
  COMPARISON
}

enum UserRole {
  STUDENT
  ADMIN
}

enum ExerciseType {
  CLOSED_SINGLE
  CLOSED_MULTIPLE
  SHORT_ANSWER
  SYNTHESIS_NOTE
  ESSAY
}

enum Category {
  LANGUAGE_USE
  HISTORICAL_LITERARY
  WRITING
}

enum LiteraryEpoch {
  ANTIQUITY
  MIDDLE_AGES
  RENAISSANCE
  BAROQUE
  ENLIGHTENMENT
  ROMANTICISM
  POSITIVISM
  YOUNG_POLAND
  INTERWAR
  CONTEMPORARY
}

enum AssessmentType {
  SYSTEM
  AI
}